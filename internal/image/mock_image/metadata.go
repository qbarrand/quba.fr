// Code generated by MockGen. DO NOT EDIT.
// Source: metadata.go

// Package mock_image is a generated GoMock package.
package mock_image

import (
	gomock "github.com/golang/mock/gomock"
	image "github.com/qbarrand/quba.fr/internal/image"
	reflect "reflect"
)

// MockMetaDB is a mock of MetaDB interface
type MockMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDBMockRecorder
}

// MockMetaDBMockRecorder is the mock recorder for MockMetaDB
type MockMetaDBMockRecorder struct {
	mock *MockMetaDB
}

// NewMockMetaDB creates a new mock instance
func NewMockMetaDB(ctrl *gomock.Controller) *MockMetaDB {
	mock := &MockMetaDB{ctrl: ctrl}
	mock.recorder = &MockMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetaDB) EXPECT() *MockMetaDBMockRecorder {
	return m.recorder
}

// AllNames mocks base method
func (m *MockMetaDB) AllNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllNames indicates an expected call of AllNames
func (mr *MockMetaDBMockRecorder) AllNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllNames", reflect.TypeOf((*MockMetaDB)(nil).AllNames))
}

// GetMetadata mocks base method
func (m *MockMetaDB) GetMetadata(arg0 string) (*image.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0)
	ret0, _ := ret[0].(*image.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockMetaDBMockRecorder) GetMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetaDB)(nil).GetMetadata), arg0)
}
